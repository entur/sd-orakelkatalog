# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/configuration-reference

# For a detailed guide to building and testing with Python, read the docs:
# https://circleci.com/docs/language-python/ for more details
version: 2.1
aliases:
  - &google-sdk-container-config
    docker:
      - image: google/cloud-sdk:latest
        auth:
          username: $DOCKERHUB_LOGIN
          password: $DOCKERHUB_PASSWORD
  - &GCP-auth-docker
    name: GCP authentication with docker
    command: |
      echo $DOCKER_PASSWORD > ${HOME}/account-auth.json
  - &tag-git-version
    name: Tag git commit with build version and push to github
    command: |
      git config --global user.email "circleci@entur.no"
      git config --global user.name "circleci"
      git tag $VERSION
      git push origin $VERSION
  - &create-image-version
    name: Create new image version and store to env var and as file in workspace
    command: |
      echo "export VERSION=$CIRCLE_BRANCH-v$CIRCLE_BUILD_NUM-$(echo -n $CIRCLE_SHA1 | tail -c 8)"  >> $BASH_ENV
  - &docker-build-and-push
    name: Docker build and push
    command: |
      IMAGE="eu.gcr.io/entur-system-1287/${CIRCLE_PROJECT_REPONAME}"
      echo "Image: ${IMAGE}"
      docker build . -f backend/Dockerfile -t $IMAGE
      docker tag $IMAGE "${IMAGE}":"${VERSION}"
      docker login -u _json_key --password-stdin https://eu.gcr.io < ${HOME}/account-auth.json
      docker push "${IMAGE}":"${VERSION}"

# Orbs are reusable packages of CircleCI configuration that you may share across projects, enabling you to create encapsulated, parameterized commands, jobs, and executors that can be used across multiple projects.
# See: https://circleci.com/docs/orb-intro/
orbs:
  # See the Python orb documentation here: https://circleci.com/developer/orbs/orb/circleci/python
  python: circleci/python@2.1.1

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/jobs-steps/#jobs-overview & https://circleci.com/docs/configuration-reference/#jobs
jobs:
  install-test:
    docker:
      - image: cimg/python:3.12
        auth:
          username: $DOCKERHUB_LOGIN
          password: $DOCKERHUB_PASSWORD
    steps:
      - checkout
      - python/install-packages:
          pkg-manager: pip
          app-dir: ~/project/backend/  # If your requirements.txt isn't in the root directory.
  build-push:
    <<: *google-sdk-container-config
    steps:
      - setup_remote_docker:
          version: docker24
          docker_layer_caching: true
      - attach_workspace:
          at: ~/project
      - run: *GCP-auth-docker
      - checkout
      - run: *create-image-version
      - run: *docker-build-and-push


# Orchestrate jobs using workflows
# See: https://circleci.com/docs/workflows/ & https://circleci.com/docs/configuration-reference/#workflows
workflows:
  install-test-build-deploy: # This is the name of the workflow, feel free to change it to better match your workflow.
    # Inside the workflow, you define the jobs you want to run.
    jobs:
      - build-push:
          context: global
          filters:
            branches:
              only:
                - main